version: "3"

services:
  # The JupyterHub service configuration {
  hub:
    image: jupyterhub-traefik-proxy:example
    build:
      context: .
      args:
        JUPYTERHUB_VERSION: latest

    # Start traefik first
    depends_on:
      - traefik

    volumes:
      # Jupyterhub configuration file
      - "./jupyterhub_config.py:/srv/jupyterhub/jupyterhub_config.py:ro"

      # Shared volume for the file provider's dynamic config
      - "traefik-dynamic-config:/var/run/traefik/"

      # jupyterhub's DockerSpawner needs read access to the docker socket.
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

      # Volume to persist the jupyterhub sqlite database
      - "data:/srv/jupyterhub"

    networks:
      - traefik_internal

    environment:
      # This username will be a JupyterHub admin
      JUPYTERHUB_ADMIN: admin
      # All containers will join this network
      DOCKER_NETWORK_NAME: traefik-internal
      # JupyterHub will spawn this Notebook image for users
      DOCKER_NOTEBOOK_IMAGE: jupyter/base-notebook:latest
      # Notebook directory inside user image
      DOCKER_NOTEBOOK_DIR: /home/jovyan/work
      # Using this run command
      DOCKER_SPAWN_CMD: start-singleuser.sh

  # } /JupyterHub

  # The traefik service configuration {
  traefik:
    image: traefik:latest
    restart: unless-stopped

    ports:
      - "80:80/tcp"
      # Will want to turn on 443 in production of course!
      #- "443:443/tcp"
      # No need to expose the traefik API port externally
      #- ":8080/tcp"

    volumes:
      # Static configuration file
      - ./traefik.yaml:/etc/traefik/traefik.yml:ro

      # Shared dynamic config volume
      - traefik-dynamic-config:/var/run/traefik

      # Traefik needs read-only access to the docker API socket
      - /var/run/docker.sock:/var/run/docker.sock:ro

    # Docker labels are a nice way to add settings to traefik's dynamic
    # configuration.

    #labels:
      # Tell traefik to enable the rules defined in the below labels.
      #- "traefik.enable=true"

      # Dashboard configuration
      #- "traefik.http.routers.dashboard.entryPoints=websecure"

      # Rou_er rule for requests to the api service. The 'Host' rule must match the following in
      # jupyterhub_config.py:-
      #   c.TraefikFileProviderProxy.traefik_api_url = "https://traefik"
      #- "traefik.http.routers.dashboard.rule=Host(`traefik`) && PathPrefix(`/api`, `/dashboard`)"
      #- "traefik.http.routers.dashboard.service=api@internal"

      # Connections to the dashboard and api should be encrypted
      #- "traefik.http.routers.dashboard.tls=true"

      # Users should be authorised to access the dashboard and api
      #- "traefik.http.routers.dashboard.middlewares=dashboard-auth"

      # User: "admin". Password: "password". (N.B. Each $ char must be escaped, with an extra $)
      #- "traefik.http.middlewares.dashboard-auth.basicauth.users=admin:$$apr1$$uqxc0z9g$$ukB361ceL17eKK7gBZSkG1"

    networks:
      - default
      - traefik_internal

    # } /traefik

volumes:
  # Jupyterhub data volume
  data:
  # traefik's dynamic configuration folder will be in a volume shared between
  # both services
  traefik-dynamic-config:

networks:
  traefik_internal:
    # The default network name will have this folder's name prepended to it.
    # Fix its full name here, to match 'c.DockerSpawner.network_name', in
    # jupyterhub_config.py.
    name: traefik_internal
